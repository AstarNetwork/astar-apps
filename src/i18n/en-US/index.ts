export default {
  confirm: 'Confirm',
  cancel: 'Cancel',
  change: 'Change',
  copy: 'Copy',
  max: 'Max',
  forget: 'Forget',
  close: 'Close',
  common: {
    updateMetadata: 'Update Metadata',
    metadataAlreadyInstalled: 'Metadata Already Installed',
    lightMode: 'Light mode',
    darkMode: 'Dark mode',
    dApps: 'dApps',
    store: 'Store',
    plasmLockdrop: 'Plasm Lockdrop',
    closeSidebar: 'Close sidebar',
    twitter: 'Twitter',
    telegram: 'Telegram',
    discord: 'Discord',
    github: 'GitHub',
    docs: 'Documentation',
  },
  balance: {
    totalBalance: 'Total Balance',
    balance: 'Balance',
    transfer: 'Transfer',
    transferable: 'Transferable',
    modals: {
      connectMetamask: 'Connect to MetaMask',
      ethereumExtension: 'ECDSA (Ethereum extension)',
      chooseAccount: 'Choose Account',
      chooseNetwork: 'Choose Networks',
      switch: 'Switch',
      sigExtrinsicBlocked:
        'Custom sig extrinsic calls has been temporarily blocked',
      transferToken: 'Transfer {token}',
      transferableBalance: '{token} transferable balance',
      sendFrom: 'Send from',
      sendTo: 'Send to',
      alert: 'Alert',
    },
  },
  dapps: {
    codeHashes: 'Code hashes',
    codeHash: 'Code hash',
    msgs: 'Messages',
    copyAbi: 'Copy ABI',
    contracts: 'Contracts',
    createYourDapp: 'Create your dApp',
    addExistingCodeHash: 'Add an existing code hash',
    modals: {
      createYourDapps: 'Create Your dApps ({step} / 2)',
      deploymentAccount: 'Deployment Account',
      projectName: 'Project name',
      nextStep: 'Next Step',
      previousStep: 'Previous Step',
      instantiationConstructor: 'Instantiation Constructor',
      upload: 'upload',
      contractFile: 'Contract file',
      file: 'File: {name}',
      uploadFile: 'Upload a file',
      dropFile: 'Drop the files here ...',
      orDrag: 'or drag and drop',
      callContract: 'Call a Contract',
      contractToUse: 'Contract to use:',
      callFromAccount: 'Call from account',
      msgToSend: 'Message to send',
      outcome: 'Outcome',
      read: 'Read',
      execute: 'Execute',
      codeBundleName: 'Code bundle name',
      contractAbi: 'Contract ABI',
      save: 'Save',
      removal: 'removal',
      removeCode: {
        first:
          'You are about to remove this code from your list of available code hashes. Once completed, should you need to access it again, you will have to manually add the code hash again.',
        second:
          'This operation does not remove the uploaded code WASM and ABI from the chain, nor any deployed contracts. The forget operation only limits your access to the code on this browser.',
      },
      removeContract: {
        first:
          "You are about to remove this contract from your list of available contracts. Once completed, should you need to access it again, you will have to manually add the contract's address in the Instantiate tab.",
        second:
          ' This operation does not remove the history of the contract from the chain, nor any associated funds from its account. The forget operation only limits your access to the contract on his browser.',
      },
      fees: {
        feesOf: 'Fees of',
        appliedToSubmission: 'will be applied to the submission',
      },
    },
  },
  store: {
    dappsStore: 'dApps Store',
    registerDapp: 'Register dApp',
    noDappsRegistered: 'No dApps registered. Be a first to register one.',
    totalStake: 'Total stake:',
    yourStake: 'Your stake: ',
    add: 'Add',
    unstake: 'Unstake',
    stake: 'Stake',
    claim: 'Claim',
    modals: {
      alreadyClaimed: 'Already claimed:',
      contractRewards: 'Contract rewards:',
      yourRewards: 'Your rewards',
      contractAddress: 'Contract address {address}',
      logo: 'Logo',
      register: 'Register',
      address: 'Address',
    },
  },
};
